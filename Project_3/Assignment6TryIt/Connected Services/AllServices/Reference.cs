//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Assignment6TryIt.AllServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AllServices.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Top10Words", ReplyAction="http://tempuri.org/IService1/Top10WordsResponse")]
        string[] Top10Words(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Top10Words", ReplyAction="http://tempuri.org/IService1/Top10WordsResponse")]
        System.Threading.Tasks.Task<string[]> Top10WordsAsync(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WeatherService", ReplyAction="http://tempuri.org/IService1/WeatherServiceResponse")]
        string[] WeatherService(string zipcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WeatherService", ReplyAction="http://tempuri.org/IService1/WeatherServiceResponse")]
        System.Threading.Tasks.Task<string[]> WeatherServiceAsync(string zipcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BrakeService", ReplyAction="http://tempuri.org/IService1/BrakeServiceResponse")]
        string BrakeService(int currentMileage, int LastBrakeChangeMileage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BrakeService", ReplyAction="http://tempuri.org/IService1/BrakeServiceResponse")]
        System.Threading.Tasks.Task<string> BrakeServiceAsync(int currentMileage, int LastBrakeChangeMileage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getCar", ReplyAction="http://tempuri.org/IService1/getCarResponse")]
        string[] getCar(string year, string make, string model, string zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getCar", ReplyAction="http://tempuri.org/IService1/getCarResponse")]
        System.Threading.Tasks.Task<string[]> getCarAsync(string year, string make, string model, string zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ScheduleAppointment", ReplyAction="http://tempuri.org/IService1/ScheduleAppointmentResponse")]
        string ScheduleAppointment(string date, string time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ScheduleAppointment", ReplyAction="http://tempuri.org/IService1/ScheduleAppointmentResponse")]
        System.Threading.Tasks.Task<string> ScheduleAppointmentAsync(string date, string time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OilServiceRecommendation", ReplyAction="http://tempuri.org/IService1/OilServiceRecommendationResponse")]
        string OilServiceRecommendation(string oilType, int currentMileage, int lastOilChangeMileage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OilServiceRecommendation", ReplyAction="http://tempuri.org/IService1/OilServiceRecommendationResponse")]
        System.Threading.Tasks.Task<string> OilServiceRecommendationAsync(string oilType, int currentMileage, int lastOilChangeMileage);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Assignment6TryIt.AllServices.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Assignment6TryIt.AllServices.IService1>, Assignment6TryIt.AllServices.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] Top10Words(string url) {
            return base.Channel.Top10Words(url);
        }
        
        public System.Threading.Tasks.Task<string[]> Top10WordsAsync(string url) {
            return base.Channel.Top10WordsAsync(url);
        }
        
        public string[] WeatherService(string zipcode) {
            return base.Channel.WeatherService(zipcode);
        }
        
        public System.Threading.Tasks.Task<string[]> WeatherServiceAsync(string zipcode) {
            return base.Channel.WeatherServiceAsync(zipcode);
        }
        
        public string BrakeService(int currentMileage, int LastBrakeChangeMileage) {
            return base.Channel.BrakeService(currentMileage, LastBrakeChangeMileage);
        }
        
        public System.Threading.Tasks.Task<string> BrakeServiceAsync(int currentMileage, int LastBrakeChangeMileage) {
            return base.Channel.BrakeServiceAsync(currentMileage, LastBrakeChangeMileage);
        }
        
        public string[] getCar(string year, string make, string model, string zipCode) {
            return base.Channel.getCar(year, make, model, zipCode);
        }
        
        public System.Threading.Tasks.Task<string[]> getCarAsync(string year, string make, string model, string zipCode) {
            return base.Channel.getCarAsync(year, make, model, zipCode);
        }
        
        public string ScheduleAppointment(string date, string time) {
            return base.Channel.ScheduleAppointment(date, time);
        }
        
        public System.Threading.Tasks.Task<string> ScheduleAppointmentAsync(string date, string time) {
            return base.Channel.ScheduleAppointmentAsync(date, time);
        }
        
        public string OilServiceRecommendation(string oilType, int currentMileage, int lastOilChangeMileage) {
            return base.Channel.OilServiceRecommendation(oilType, currentMileage, lastOilChangeMileage);
        }
        
        public System.Threading.Tasks.Task<string> OilServiceRecommendationAsync(string oilType, int currentMileage, int lastOilChangeMileage) {
            return base.Channel.OilServiceRecommendationAsync(oilType, currentMileage, lastOilChangeMileage);
        }
    }
}
